#version 460
#define PI 3.14159265358979323846
layout(local_size_x = 2, local_size_y = 2, local_size_z = 2) in;
layout(rgba32f, binding = 0) uniform image3D img_output;

struct vertex { // vertex output format
	vec4 position;
	
	float fill;
	float biome_index;
	float water;
	float heat;
};


uniform vec3 offset;
uniform float maxFill = 1.0;


struct Biome {
	float ampB;
	float ampC;
	float ampD;
	float freqB;
	float freqC;
	float freqD;
};



uniform uint biome_type_A;
uniform uint biome_type_B;
uniform vec3 boundryA;
uniform vec3 boundryB;

Biome biomes[] =  {{32.0, 16.0, 4.0, 0.002706099, 0.0130321, 0.013718}, // hills
					{8.0, 4.0, 2.0, 0.002706099, 0.0130321, 0.013718}, // ???
					{1.0, 1.0, 1.0, 0.002706099, 0.0130321, 0.013718}}; // ???

Biome biome;
int biomeMode = 0; // 0 for a, 1 for b, -1 for transition

//////////////////////////////////////////////////////////////////////////////

//	Simplex 3D Noise 
//	by Ian McEwan, Ashima Arts
//
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}

float snoise(vec3 v){ 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0);
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx);

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //  x0 = x0 - 0. + 0.0 * C 
  vec3 x1 = x0 - i1 + 1.0 * C.xxx;
  vec3 x2 = x0 - i2 + 2.0 * C.xxx;
  vec3 x3 = x0 - 1. + 3.0 * C.xxx;

// Permutations
  i = mod(i, 289.0 ); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients
// ( N*N points uniformly over a square, mapped onto an octahedron.)
  float n_ = 1.0/7.0; // N=7
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}

float get_snoise(vec3 pos, float amp, float freq) {
	return amp*snoise(freq*pos);
}

float get_cavenoise(vec3 pos, float freq, float floor_height, float base_elevation) {
	float t = floor_height - pos.y; // always positive
	float skew;

	pos = pos*vec3(0.5, 0.75, 0.5); // lower values stretch the cave

	float noise = get_snoise(pos, 1.0, freq)+0.5;

	if ((t <= max(min(128-abs(base_elevation), 32.0), 0.0))) { // min cave distance
		return 1.0;
	} else {
		skew = (1/(0.00002*t*t*t+2)); 
		// in graph, highlight f(x) <= y <= 1 {x >= 0}
		// this is the chance that a hole occurs
		// as a function of the distance from ground level (t)
	}

	return round(skew+noise); // 1 or 0
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////


void main() {
  // get index in global work group i.e x,y position
  ivec3 pixel_coords = ivec3(gl_GlobalInvocationID);
  vec3 noise_coords = pixel_coords + offset;

  // Set biome
  if (noise_coords.x > boundryA.x){// || noise_coords.y > boundryA.y || noise_coords.z > boundryA.z) {
	if (noise_coords.x > boundryB.x){// || noise_coords.y > boundryB.y || noise_coords.z > boundryB.z) {
		biome = biomes[biome_type_B];
		biomeMode = 1;
	} else {
		biome.ampB = (biomes[biome_type_A].ampB + biomes[biome_type_B].ampB)/2.0;
		biome.ampC = (biomes[biome_type_A].ampC + biomes[biome_type_B].ampC)/2.0;
		biome.ampD = (biomes[biome_type_A].ampD + biomes[biome_type_B].ampD)/2.0;
		biome.freqB = (biomes[biome_type_A].freqB + biomes[biome_type_B].freqB)/2.0;
		biome.freqC = (biomes[biome_type_A].freqC + biomes[biome_type_B].freqC)/2.0;
		biome.freqD = (biomes[biome_type_A].freqD + biomes[biome_type_B].freqD)/2.0;
		biomeMode = -1;
	}
  } else {
	biome = biomes[biome_type_A];
	biomeMode = 0;
  }

  //////////////////////////////////////////////////////////////////////////

// Generate Fill
	float baseAmp = 64.0;
	float baseFreq = 0.00045881;
	
	// Make heightmap
	
	// biome changing goes here
	float base_elevation = get_snoise(vec3(noise_coords.x, 0.0, noise_coords.z), baseAmp, baseFreq);
	float elevationD = get_snoise(vec3(noise_coords.x, 0.0, noise_coords.z), biome.ampD, biome.freqD);
	//float extra_roughness = get_snoise(1000*vec3(noise_coords.x, 0.0, noise_coords.z), 3.0, biome.freqD);
	float elevation = base_elevation
				 + get_snoise(vec3(noise_coords.x, 0.0, noise_coords.z), biome.ampB, biome.freqB)
				 + get_snoise(vec3(noise_coords.x, 0.0, noise_coords.z), biome.ampC, biome.freqC)
				 + elevationD;

	float caveNoise = get_cavenoise(noise_coords, 0.05845881, elevation - elevationD, base_elevation);

	float ground = elevation - (noise_coords.y * maxFill);
	ground = min(ground, maxFill) * caveNoise;

	float fill = min(ground, maxFill);

	float watertable = get_snoise(noise_coords + vec3(128.0), baseAmp/2.0, baseFreq*0.001) - baseAmp/4.0;
	
	float waterlevel = 0.0;
	if (noise_coords.y < watertable // pixel below waterlevel
		&& watertable > elevation // waterlevel above bedrock
		&& noise_coords.y > min(min(watertable-4*(watertable-elevation), watertable-32.0), elevation)) { // waterlevel doesn't go down forever
		float water_fill = watertable - (noise_coords.y * maxFill);
		waterlevel += water_fill;
	}

	waterlevel = (waterlevel > 0 && waterlevel < maxFill) ? 0.5 : waterlevel; // water shouldn't be curved (but the noise that makes it is)
	
	//////////////////////////////////////////////////////////////////////////

	// decide material
	float material = 1.0;
	float down = elevation - noise_coords.y;
	if (down < 0) {
		// air
	} else if (down < 2) { // grass
		material = 1.0;
	} else if (down < 10) { // dirt
		material = 2.0;
	} else {
		material = 3.0; // stone
	}
	if (biomeMode == -1) {
		if (length(noise_coords - boundryA) < length(noise_coords - boundryB)) {
			biomeMode = 0;
		} else {
			biomeMode = 1;
		}
	} 
	if (biomeMode == 0) {
		material += 3 * biome_type_A;
	} else {
		material += 3 * biome_type_B;
	}

	if (down > 256) {
		material = 3.0;
	}

	//////////////////////////////////////////////////////////////////////////

  // output to a specific pixel in the image

  vec4 pixel = vec4(fill, material, waterlevel, 1.0);
  pixel.x = waterlevel > 0.0 && waterlevel < maxFill ? 1.0 : pixel.x; // water surface should be filled

// Grid floor
//vec4 pixel = vec4(0.0, 1.0, 0.0, 0.0);
//pixel.x = (pixel_coords.y == vec3(0.0).y && (pixel_coords.x % 4 == 0 || pixel_coords.z % 4 == 0)) ? 1.0 : 0.0;
//pixel.z = (pixel_coords.x == 0.0 || pixel_coords.y == 1.0 || pixel_coords.z == 0.0) ? 1.0 : 0.0;


  imageStore(img_output, pixel_coords.xyz, pixel);
}