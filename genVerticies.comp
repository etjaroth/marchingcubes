#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image3D generated_data;

#define IV -2

struct Vertex {
	vec4 pos;
	vec4 normal;
	vec4 material; // material_index, tex_coords
	// The doccumentation warns against using vec3s
};

const uint sizeofVec4 = 4 * 4;
const uint sizeofVertex = 3 * sizeofVec4;
const uint verticiesSize = 3; // 3 vec4s per vertex

layout (binding=0, std140) buffer vertex_output {
	//Vertex verticies[];
	vec4 verticies[];
};

uniform vec3 pos = vec3(0.0);
uniform float maxFill = 1.0;
uniform float minFill = 0.0;
uniform ivec3 chunk_size;

const float isolevel = 0.0;
vec3 vec3interpolate(vec3 v1, float f1, vec3 v2, float f2) {
	// Code adapted from paulbourke.net/geometry/polygonise/
	if (abs(isolevel - f1) < 0.00001 || abs(f1 - f2) < 0.00001) {
		return v1;
	}
	else if (abs(isolevel - f2) < 0.00001) {
		return v2;
	}
	else if (abs(f1-f2) < 0.00001) {
      return v1;
	}

	float mu = (isolevel - f1)/(f2-f1);
	//mu = max(0.0, min(1.0, mu));

	return v1 + mu * (v2 - v1);
}

void main() {
	int idx = int(gl_GlobalInvocationID.x);
	const ivec3 axies[3] = {ivec3(1, 0, 0), ivec3(0, 1, 0), ivec3(0, 0, 1)};
	int axis_id = idx % 3;
	int i = (idx - axis_id) / 3;

	// Read output from genIndicies.comp
	//const float start = verticies[idx].pos.x;
	const float start = verticies[verticiesSize * idx + 0].x;
	//const float waterlevel = verticies[idx].pos.y;
	const float waterlevel = verticies[verticiesSize * idx].y;
	
	const int z = i / (int(chunk_size.x) * int(chunk_size.y));
    i -= (z * (int(chunk_size.x) * int(chunk_size.y)));

	// Get back points from the edge
	ivec3 point_a = ivec3(i % int(chunk_size.x), i / int(chunk_size.x), z);
	ivec3 point_b = point_a + axies[axis_id]; // see genIndices

	const vec3 true_point_a = vec3(point_a) + pos;
	const vec3 true_point_b = vec3(point_b) + pos;

	//point_a += ivec3(1);
	//point_b += ivec3(1);

	vec4 data_a = imageLoad(generated_data, point_a);
	vec4 data_b = imageLoad(generated_data, point_b);
	// Input format: fill, material, waterlevel, 1.0

	if (start != 1.0) {return;} // We don't need or want a vertex on this edge

	Vertex vertex;
	vertex.pos = vec4(vec3interpolate(true_point_a, data_a.x, true_point_b, data_b.x), 1.0);

	// Calculate normal
	// Sample a[dir][positive/negative]
	float axp = imageLoad(generated_data, point_a + ivec3(1, 0, 0)).x;
	float axn = imageLoad(generated_data, point_a + ivec3(-1, 0, 0)).x;
	float ayp = imageLoad(generated_data, point_a + ivec3(0, 1, 0)).x;
	float ayn = imageLoad(generated_data, point_a + ivec3(0, -1, 0)).x;
	float azp = imageLoad(generated_data, point_a + ivec3(0, 0, 1)).x;
	float azn = imageLoad(generated_data, point_a + ivec3(0, 0, -1)).x;

	// Sample b[dir][positive/negative]
	float bxp = imageLoad(generated_data, point_b + ivec3(1, 0, 0)).x;
	float bxn = imageLoad(generated_data, point_b + ivec3(-1, 0, 0)).x;
	float byp = imageLoad(generated_data, point_b + ivec3(0, 1, 0)).x;
	float byn = imageLoad(generated_data, point_b + ivec3(0, -1, 0)).x;
	float bzp = imageLoad(generated_data, point_b + ivec3(0, 0, 1)).x;
	float bzn = imageLoad(generated_data, point_b + ivec3(0, 0, -1)).x;
	
	// Compute gradient (normal)
	vec3 gradienta = vec3(axp - axn, ayp - ayn, azp - ayn);
	vec3 gradientb = vec3(bxp - bxn, byp - byn, bzp - byn);

	vertex.normal = -vec4(normalize(vec3interpolate(gradienta, data_a.x, gradientb, data_b.x)), 0.0);

	vertex.material = data_a.x > data_b.y ? vec4(data_a.y, data_a.z, 0.0, 0.0) : vec4(data_b.y, data_b.z, 0.0, 0.0);
	vertex.material.x = (waterlevel == 1.0) ? 0.0 : vertex.material.x;

	//Output vertex
	//verticies[idx] = vertex;

	float edge_to_dir[12] = {0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 2.0, 2.0, 2.0};
	// + vec3(gl_GlobalInvocationID.xyz)

	verticies[verticiesSize * idx + 0].x = vertex.pos.x;
	verticies[verticiesSize * idx + 0].y = vertex.pos.y;
	verticies[verticiesSize * idx + 0].z = vertex.pos.z;
	verticies[verticiesSize * idx + 0].w = vertex.pos.w;

	verticies[verticiesSize * idx + 1].x = vertex.normal.x;
	verticies[verticiesSize * idx + 1].y = vertex.normal.y;
	verticies[verticiesSize * idx + 1].z = vertex.normal.z;
	verticies[verticiesSize * idx + 1].w = vertex.normal.w;

	verticies[verticiesSize * idx + 2].x = vertex.material.x;
	verticies[verticiesSize * idx + 2].y = vertex.material.y;
	verticies[verticiesSize * idx + 2].z = vertex.material.z;
	verticies[verticiesSize * idx + 2].w = vertex.material.w;

	// Testing 
//	verticies[verticiesSize * idx + 2].x = data_a.x;
//	verticies[verticiesSize * idx + 2].y = data_b.x;
//	verticies[verticiesSize * idx + 2].z = 1.234;
//	verticies[verticiesSize * idx + 2].w = 5.6789;
}